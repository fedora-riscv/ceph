--- ceph-13.2.1/src/spdk/lib/blob/blobstore.c.orig	2018-07-30 08:31:05.138254900 -0400
+++ ceph-13.2.1/src/spdk/lib/blob/blobstore.c	2018-07-30 08:32:05.314254900 -0400
@@ -393,7 +393,7 @@
 	 * happen for example if a bogus blobid is passed in through open.
 	 */
 	if (blob->id != pages[0].id) {
-		SPDK_ERRLOG("Blobid (%lu) doesn't match what's in metadata (%lu)\n",
+		SPDK_ERRLOG("Blobid (%llu) doesn't match what's in metadata (%llu)\n",
 			    blob->id, pages[0].id);
 		return -ENOENT;
 	}
@@ -2947,7 +2947,7 @@
 
 /* START spdk_blob_resize */
 int
-spdk_blob_resize(struct spdk_blob *_blob, uint64_t sz)
+spdk_blob_resize(struct spdk_blob *_blob, size_t sz)
 {
 	struct spdk_blob_data	*blob = __blob_to_data(_blob);
 	int			rc;
--- ceph-13.2.1/src/spdk/lib/lvol/lvol.c.orig	2018-07-30 09:08:38.137254900 -0400
+++ ceph-13.2.1/src/spdk/lib/lvol/lvol.c	2018-07-30 09:10:09.642254900 -0400
@@ -970,7 +970,7 @@
 	num_clusters = divide_round_up(sz, spdk_bs_get_cluster_size(bs));
 	free_clusters = spdk_bs_free_cluster_count(bs);
 	if (num_clusters > free_clusters) {
-		SPDK_ERRLOG("Not enough free clusters left (%zu) on lvol store to add lvol %zu clusters\n",
+		SPDK_ERRLOG("Not enough free clusters left (%llu) on lvol store to add lvol %llu clusters\n",
 			    free_clusters, num_clusters);
 		return -ENOMEM;
 	}
@@ -1026,7 +1026,7 @@
 	if (new_clusters > used_clusters) {
 		/* Check if there is enough clusters left to resize */
 		if (new_clusters - used_clusters > free_clusters) {
-			SPDK_ERRLOG("Not enough free clusters left on lvol store to resize lvol to %zu clusters\n", sz);
+			SPDK_ERRLOG("Not enough free clusters left on lvol store to resize lvol to %llu clusters\n", sz);
 			return -ENOMEM;
 		}
 	}
--- ceph-13.2.1/src/spdk/lib/event/reactor.c.orig	2018-07-30 09:44:01.514254900 -0400
+++ ceph-13.2.1/src/spdk/lib/event/reactor.c	2018-07-30 09:45:02.291254900 -0400
@@ -651,7 +651,7 @@
 	char mempool_name[32];
 
 	socket_mask = spdk_reactor_get_socket_mask();
-	SPDK_NOTICELOG("Occupied cpu socket mask is 0x%lx\n", socket_mask);
+	SPDK_NOTICELOG("Occupied cpu socket mask is 0x%" PRIx64 "\n", socket_mask);
 
 	for (i = 0; i < SPDK_MAX_SOCKET; i++) {
 		if ((1ULL << i) & socket_mask) {
